{
  "permissions": {
    "allow": [
      "Bash(find:*)",
      "Bash(grep:*)",
      "Bash(ls:*)",
      "Bash(touch:*)",
      "Bash(python:*)",
      "Bash(./venv/bin/python -m src.laser_trim_analyzer:*)",
      "Bash(venv/Scripts/python.exe -m:*)",
      "Bash(rg:*)",
      "Bash(rm:*)",
      "Bash(mkdir:*)",
      "Bash(# Create a script to check for unused files\ncat > /tmp/find_unused.py << 'EOF'\nimport os\nimport re\nfrom pathlib import Path\n\nbase_dir = Path(\"src/laser_trim_analyzer\")\nall_py_files = set()\nimported_modules = set()\n\n# Get all Python files\nfor file in base_dir.rglob(\"*.py\"):\n    relative_path = file.relative_to(base_dir)\n    module_name = str(relative_path).replace(\"/\", \".\").replace(\".py\", \"\")\n    all_py_files.add(module_name)\n\n# Find all imports\nfor file in base_dir.rglob(\"*.py\"):\n    with open(file, \"r\", encoding=\"utf-8\", errors=\"ignore\") as f:\n        content = f.read()\n        \n        # Find from imports\n        from_imports = re.findall(r'from\\s+(?:\\.+)?laser_trim_analyzer(?:\\.(\\S+))?\\s+import', content)\n        for imp in from_imports:\n            if imp:\n                imported_modules.add(imp)\n        \n        # Find direct imports\n        direct_imports = re.findall(r'import\\s+laser_trim_analyzer(?:\\.(\\S+))?', content)\n        for imp in direct_imports:\n            if imp:\n                imported_modules.add(imp)\n                \n        # Find relative imports\n        rel_imports = re.findall(r'from\\s+\\.(\\S+)\\s+import', content)\n        current_package = str(file.parent.relative_to(base_dir)).replace(\"/\", \".\")\n        for imp in rel_imports:\n            if current_package:\n                imported_modules.add(f\"{current_package}.{imp}\")\n            else:\n                imported_modules.add(imp)\n\n# Exclude __init__ files as they're needed for packages\npotentially_unused = []\nfor module in sorted(all_py_files):\n    if module.endswith(\"__init__\"):\n        continue\n    if module == \"__main__\":\n        continue\n        \n    # Check if module or any parent module is imported\n    is_imported = False\n    parts = module.split(\".\")\n    for i in range(len(parts)):\n        partial = \".\".join(parts[:i+1])\n        if partial in imported_modules:\n            is_imported = True\n            break\n    \n    if not is_imported:\n        potentially_unused.append(module)\n\nprint(\"Potentially unused modules:\")\nfor module in potentially_unused:\n    print(f\"  - {module}\")\nEOF\n\npython /tmp/find_unused.py)",
      "Bash(./venv/Scripts/python.exe -c \"import pydantic; print('Pydantic version:', pydantic.__version__)\" 2>&1)",
      "Bash(./venv/Scripts/python.exe -c \"import sys; sys.path.insert(0, 'src'); from laser_trim_analyzer.gui.main_window import main; print('Import successful')\" 2>&1)",
      "Bash(./venv/Scripts/pip.exe install:*)",
      "Bash(./venv/Scripts/python.exe -c \"import sys; sys.path.insert(0, 'src'); from laser_trim_analyzer.gui.main_window import main; print('Import successful')\" 2>&1)",
      "Bash(./venv/Scripts/python.exe -m:*)",
      "Bash(./venv/Scripts/python.exe test_imports.py:*)",
      "Bash(./venv/Scripts/python.exe test_gui_minimal.py:*)",
      "Bash(./venv/Scripts/python.exe run_gui.py:*)",
      "Bash(./venv/Scripts/pyinstaller.exe laser_trim_analyzer.spec 2 >& 1)",
      "Bash(./venv/Scripts/pyinstaller.exe laser_trim_analyzer.spec --clean 2 >& 1)",
      "Bash(./laser-trim-analyzer-gui.exe)",
      "Bash(pip3 install:*)",
      "Bash(source:*)",
      "Bash(pip install:*)",
      "Bash(.venv/Scripts/python.exe -m pip install:*)",
      "Bash(../.venv/Scripts/python.exe test_gui_startup.py)",
      "Bash(../.venv/Scripts/python.exe test_excel_processing.py:*)",
      "Bash(../.venv/Scripts/python.exe test_single_file.py:*)",
      "Bash(awk:*)",
      "Bash(echo:*)",
      "Bash(for file in src/laser_trim_analyzer/gui/widgets/progress*.py src/laser_trim_analyzer/gui/progress*.py)",
      "Bash(do echo \"=== Checking $file ===\")",
      "Bash(done)"
    ],
    "deny": []
  }
}