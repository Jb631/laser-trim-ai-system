{
  "$schema": "https://json.schemastore.org/claude-code-settings.json",
  "permissions": {
    "allow": [
      "Bash(find:*)",
      "Bash(grep:*)",
      "Bash(ls:*)",
      "Bash(touch:*)",
      "Bash(python:*)",
      "Bash(./venv/bin/python -m src.laser_trim_analyzer:*)",
      "Bash(venv/Scripts/python.exe -m:*)",
      "Bash(rg:*)",
      "Bash(rm:*)",
      "Bash(mkdir:*)",
      "Bash(# Create a script to check for unused files\ncat > /tmp/find_unused.py << 'EOF'\nimport os\nimport re\nfrom pathlib import Path\n\nbase_dir = Path(\"src/laser_trim_analyzer\")\nall_py_files = set()\nimported_modules = set()\n\n# Get all Python files\nfor file in base_dir.rglob(\"*.py\"):\n    relative_path = file.relative_to(base_dir)\n    module_name = str(relative_path).replace(\"/\", \".\").replace(\".py\", \"\")\n    all_py_files.add(module_name)\n\n# Find all imports\nfor file in base_dir.rglob(\"*.py\"):\n    with open(file, \"r\", encoding=\"utf-8\", errors=\"ignore\") as f:\n        content = f.read()\n        \n        # Find from imports\n        from_imports = re.findall(r'from\\s+(?:\\.+)?laser_trim_analyzer(?:\\.(\\S+))?\\s+import', content)\n        for imp in from_imports:\n            if imp:\n                imported_modules.add(imp)\n        \n        # Find direct imports\n        direct_imports = re.findall(r'import\\s+laser_trim_analyzer(?:\\.(\\S+))?', content)\n        for imp in direct_imports:\n            if imp:\n                imported_modules.add(imp)\n                \n        # Find relative imports\n        rel_imports = re.findall(r'from\\s+\\.(\\S+)\\s+import', content)\n        current_package = str(file.parent.relative_to(base_dir)).replace(\"/\", \".\")\n        for imp in rel_imports:\n            if current_package:\n                imported_modules.add(f\"{current_package}.{imp}\")\n            else:\n                imported_modules.add(imp)\n\n# Exclude __init__ files as they're needed for packages\npotentially_unused = []\nfor module in sorted(all_py_files):\n    if module.endswith(\"__init__\"):\n        continue\n    if module == \"__main__\":\n        continue\n        \n    # Check if module or any parent module is imported\n    is_imported = False\n    parts = module.split(\".\")\n    for i in range(len(parts)):\n        partial = \".\".join(parts[:i+1])\n        if partial in imported_modules:\n            is_imported = True\n            break\n    \n    if not is_imported:\n        potentially_unused.append(module)\n\nprint(\"Potentially unused modules:\")\nfor module in potentially_unused:\n    print(f\"  - {module}\")\nEOF\n\npython /tmp/find_unused.py)",
      "Bash(./venv/Scripts/python.exe -c \"import pydantic; print('Pydantic version:', pydantic.__version__)\" 2>&1)",
      "Bash(./venv/Scripts/python.exe -c \"import sys; sys.path.insert(0, 'src'); from laser_trim_analyzer.gui.main_window import main; print('Import successful')\" 2>&1)",
      "Bash(./venv/Scripts/pip.exe install:*)",
      "Bash(./venv/Scripts/python.exe -c \"import sys; sys.path.insert(0, 'src'); from laser_trim_analyzer.gui.main_window import main; print('Import successful')\" 2>&1)",
      "Bash(./venv/Scripts/python.exe -m:*)",
      "Bash(./venv/Scripts/python.exe test_imports.py:*)",
      "Bash(./venv/Scripts/python.exe test_gui_minimal.py:*)",
      "Bash(./venv/Scripts/python.exe run_gui.py:*)",
      "Bash(./venv/Scripts/pyinstaller.exe laser_trim_analyzer.spec 2 >& 1)",
      "Bash(./venv/Scripts/pyinstaller.exe laser_trim_analyzer.spec --clean 2 >& 1)",
      "Bash(./laser-trim-analyzer-gui.exe)",
      "Bash(pip3 install:*)",
      "Bash(source:*)",
      "Bash(pip install:*)",
      "Bash(.venv/Scripts/python.exe -m pip install:*)",
      "Bash(../.venv/Scripts/python.exe test_gui_startup.py)",
      "Bash(../.venv/Scripts/python.exe test_excel_processing.py:*)",
      "Bash(../.venv/Scripts/python.exe test_single_file.py:*)",
      "Bash(awk:*)",
      "Bash(echo:*)",
      "Bash(for file in src/laser_trim_analyzer/gui/widgets/progress*.py src/laser_trim_analyzer/gui/progress*.py)",
      "Bash(do echo \"=== Checking $file ===\")",
      "Bash(done)",
      "Bash(pip show:*)",
      "Bash(./venv/Scripts/python.exe test_sqlalchemy_import.py)",
      "Bash(# Move orphaned modules - alternative architecture\nmv src/laser_trim_analyzer/core/interfaces.py _archive_cleanup_20250608_192616/orphaned_modules/\nmv src/laser_trim_analyzer/core/implementations.py _archive_cleanup_20250608_192616/orphaned_modules/\nmv src/laser_trim_analyzer/core/strategies.py _archive_cleanup_20250608_192616/orphaned_modules/\nmv src/laser_trim_analyzer/core/session_manager.py _archive_cleanup_20250608_192616/orphaned_modules/\n\n# Move standalone scripts\nmv src/laser_trim_analyzer/api/ai_analysis.py _archive_cleanup_20250608_192616/orphaned_modules/\nmv src/laser_trim_analyzer/core/cache_integration.py _archive_cleanup_20250608_192616/orphaned_modules/\nmv src/laser_trim_analyzer/utils/optimize_imports_cli.py _archive_cleanup_20250608_192616/orphaned_modules/\n\n# Move unused progress system\nmv src/laser_trim_analyzer/gui/progress_system.py _archive_cleanup_20250608_192616/orphaned_modules/\nmv src/laser_trim_analyzer/gui/progress_integration.py _archive_cleanup_20250608_192616/orphaned_modules/\nmv src/laser_trim_analyzer/gui/async_handler.py _archive_cleanup_20250608_192616/orphaned_modules/\n\n# Move Qt widgets (project uses CustomTkinter)\nmv src/laser_trim_analyzer/gui/widgets/qt_progress_widgets.py _archive_cleanup_20250608_192616/orphaned_modules/\n\n# Move unused performance tools\nmv src/laser_trim_analyzer/database/performance_optimizer.py _archive_cleanup_20250608_192616/orphaned_modules/\nmv src/laser_trim_analyzer/utils/performance_monitor.py _archive_cleanup_20250608_192616/orphaned_modules/\nmv src/laser_trim_analyzer/utils/import_optimizer.py _archive_cleanup_20250608_192616/orphaned_modules/\nmv src/laser_trim_analyzer/utils/lazy_imports.py _archive_cleanup_20250608_192616/orphaned_modules/)",
      "Bash(# Move test scripts from src directory\nmv src/test_excel_processing.py _archive_cleanup_20250608_192616/test_scripts/\nmv src/test_gui_startup.py _archive_cleanup_20250608_192616/test_scripts/\nmv src/test_single_file.py _archive_cleanup_20250608_192616/test_scripts/\nmv src/test_validation_grades.py _archive_cleanup_20250608_192616/test_scripts/\n\n# Move test scripts from root directory\nmv test_import_sequence.py _archive_cleanup_20250608_192616/test_scripts/\nmv test_sqlalchemy_import.py _archive_cleanup_20250608_192616/test_scripts/\nmv test_tracks_fix.py _archive_cleanup_20250608_192616/test_scripts/\nmv test_ui_fixes.py _archive_cleanup_20250608_192616/test_scripts/)",
      "Bash(# Move generated files\nmv dependency_report.json _archive_cleanup_20250608_192616/generated_files/\nmv DEPENDENCY_ANALYSIS_REPORT.md _archive_cleanup_20250608_192616/generated_files/\n\n# Move log files\nmv src/excel_processing_test.log _archive_cleanup_20250608_192616/generated_files/\nmv src/gui_startup_test.log _archive_cleanup_20250608_192616/generated_files/\n\n# Move build spec file\nmv laser_trim_analyzer.spec _archive_cleanup_20250608_192616/generated_files/ 2>/dev/null || true)",
      "Bash(pytest:*)",
      "Bash(true)",
      "Bash(mv:*)",
      "Bash(/mnt/d/UserFolders/Desktop/laser_trim_analyzer_v2/.venv/Scripts/python.exe run_dev.py --help 2 >& 1)",
      "Bash(PYTHONPATH=/mnt/d/UserFolders/Desktop/laser_trim_analyzer_v2/src python3 test_plot_generation.py 2 >& 1)",
      "Bash(.venv/Scripts/python.exe run_dev.py:*)",
      "Bash(if [ -d \"venv\" ])",
      "Bash(then source venv/bin/activate)",
      "Bash(else echo \"No venv found\")",
      "Bash(fi)",
      "Bash(cp:*)",
      "Bash(.venv/Scripts/python:*)",
      "Bash(tree:*)",
      "Bash(sqlite3:*)",
      "Bash(pip3:*)",
      "Bash(env)",
      "Bash(set LTA_ENV=development)",
      "Bash(export LTA_ENV=development)",
      "Bash(git add:*)",
      "Bash(git push:*)",
      "Bash(cmd.exe /c clean_all_databases.bat)",
      "Bash(cmd.exe:*)",
      "Bash(taskkill:*)",
      "Bash(./clean_and_verify_databases.bat)",
      "Bash(del /f /q \"C:\\Users\\Jayma\\AppData\\Local\\LaserTrimAnalyzer\\dev\\laser_trim_dev.db\")",
      "Bash(./kill_python_and_clean_db.bat)",
      "Bash(sed:*)",
      "Bash(timeout:*)",
      "Bash(cat:*)",
      "Bash(winget install:*)",
      "Bash(.venv/Scripts/pip.exe list:*)",
      "Bash(.venv/Scripts/pip.exe install:*)",
      "Bash(.venv/Scripts/pyinstaller.exe laser_trim_analyzer.spec --clean)"
    ],
    "deny": []
  }
}