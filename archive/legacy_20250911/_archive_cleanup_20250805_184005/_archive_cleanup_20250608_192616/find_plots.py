#!/usr/bin/env python3
"""
Script to find where plots are saved from Laser Trim Analyzer.
"""

import os
from pathlib import Path
from datetime import datetime, timedelta

def find_plots():
    """Find plot files generated by the Laser Trim Analyzer."""
    print("üîç Searching for Laser Trim Analyzer plots...\n")
    
    # Common locations to check
    locations_to_check = [
        Path.home() / "LaserTrimResults",
        Path.home() / "LaserTrimData",
        Path("D:/LaserTrimData"),
        Path("D:/LaserTrimResults"),
        Path("C:/LaserTrimData"),
        Path("C:/LaserTrimResults"),
        Path.cwd() / "output",
        Path.cwd() / "results",
    ]
    
    found_plots = []
    found_dirs = []
    
    for base_path in locations_to_check:
        if base_path.exists():
            print(f"‚úì Found directory: {base_path}")
            found_dirs.append(base_path)
            
            # Look for single_analysis subdirectory
            single_analysis = base_path / "single_analysis"
            if single_analysis.exists():
                print(f"  ‚úì Found single_analysis: {single_analysis}")
                
                # List all timestamp directories
                for timestamp_dir in sorted(single_analysis.iterdir(), reverse=True):
                    if timestamp_dir.is_dir():
                        # Check age of directory
                        dir_time = datetime.fromtimestamp(timestamp_dir.stat().st_mtime)
                        age = datetime.now() - dir_time
                        age_str = f"{age.days}d {age.seconds//3600}h ago" if age.days > 0 else f"{age.seconds//3600}h {(age.seconds%3600)//60}m ago"
                        
                        # Look for PNG files
                        png_files = list(timestamp_dir.glob("*.png"))
                        if png_files:
                            print(f"\n  üìÅ {timestamp_dir.name} (modified {age_str}):")
                            for png in png_files[:5]:  # Show first 5
                                print(f"     üìä {png.name}")
                                found_plots.append(png)
                            if len(png_files) > 5:
                                print(f"     ... and {len(png_files) - 5} more plots")
                        
                        # Also check for Excel reports
                        excel_files = list(timestamp_dir.glob("*.xlsx"))
                        if excel_files:
                            for excel in excel_files:
                                print(f"     üìã {excel.name}")
            
            # Look for Production subdirectory (batch processing)
            production = base_path / "Production"
            if production.exists():
                print(f"\n  ‚úì Found Production: {production}")
                
                # Check batch_analysis
                batch_analysis = production / "batch_analysis"
                if batch_analysis.exists() and any(batch_analysis.iterdir()):
                    recent_batches = sorted(batch_analysis.iterdir(), key=lambda p: p.stat().st_mtime, reverse=True)[:5]
                    print(f"     Recent batch analyses: {len(list(batch_analysis.iterdir()))} total")
                    for batch_dir in recent_batches:
                        if batch_dir.is_dir():
                            dir_time = datetime.fromtimestamp(batch_dir.stat().st_mtime)
                            age = datetime.now() - dir_time
                            age_str = f"{age.days}d ago" if age.days > 0 else "today"
                            print(f"     - {batch_dir.name} ({age_str})")
    
    if not found_dirs:
        print("\n‚ùå No output directories found!")
        print("\nThe plots should be saved in one of these locations:")
        for path in locations_to_check[:4]:
            print(f"  - {path}")
    
    if found_plots:
        print(f"\n‚úÖ Found {len(found_plots)} plot files total")
        print("\nMost recent plot:")
        most_recent = max(found_plots, key=lambda p: p.stat().st_mtime)
        print(f"  üìä {most_recent}")
        print(f"\nTo open the folder containing this plot, run:")
        print(f'  explorer "{most_recent.parent}"' if os.name == 'nt' else f'  open "{most_recent.parent}"')
    else:
        print("\n‚ö†Ô∏è  No plot files (.png) found!")
        print("\nPossible reasons:")
        print("  1. 'Generate Plots' checkbox was not checked during analysis")
        print("  2. Plot generation failed silently")
        print("  3. Plots were saved to a different location")
        print("\nTo generate plots:")
        print("  1. Open the Single File Analysis page")
        print("  2. Select a file to analyze")
        print("  3. Make sure 'Generate Plots' is checked ‚úì")
        print("  4. Click 'Analyze File'")

if __name__ == "__main__":
    find_plots()