
# pyproject.toml
[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "laser-trim-analyzer"
version = "2.0.0"
description = "Modern QA analysis platform for potentiometer laser trim data"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Your Name", email = "your.email@company.com"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Manufacturing",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Quality Control",
]

dependencies = [
    # Core
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",

    # Data processing
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    "openpyxl>=3.1.0",
    "xlrd>=2.0.0",

    # Visualization
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",

    # Database
    "sqlalchemy>=2.0.0",
    "alembic>=1.12.0",

    # ML/Scientific
    "scikit-learn>=1.3.0",
    "scipy>=1.11.0",
    "statsmodels>=0.14.0",

    # GUI
    "customtkinter>=5.2.0",
    "ttkthemes>=3.2.0",

    # API
    "httpx>=0.25.0",
    "tenacity>=8.2.0",

    # Utilities
    "pyyaml>=6.0",
    "rich>=13.0.0",  # Better console output
    "click>=8.1.0",   # CLI interface
    "python-dotenv>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.7.0",
    "pre-commit>=3.5.0",
]

ml = [
    "tensorflow>=2.13.0",
    "torch>=2.0.0",
    "transformers>=4.30.0",
]

[project.scripts]
laser-trim-analyzer = "laser_trim_analyzer.__main__:main"
lta = "laser_trim_analyzer.cli:cli"

[project.gui-scripts]
laser-trim-analyzer-gui = "laser_trim_analyzer.gui.main_window:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
laser_trim_analyzer = ["py.typed", "*.yaml", "*.json"]

# Tool configurations
[tool.black]
line-length = 100
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'

[tool.ruff]
line-length = 100
target-version = "py310"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = ["E501"]  # line too long

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
